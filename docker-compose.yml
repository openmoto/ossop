services:
  opensearch:
    image: opensearchproject/opensearch:${OPENSEARCH_VERSION}
    container_name: ${OPENSEARCH_HOSTNAME}
    hostname: ${OPENSEARCH_HOSTNAME}
    environment:
      - cluster.name=opensearch-cluster
      - node.name=${OPENSEARCH_HOSTNAME}-node1
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms${OPENSEARCH_JVM_HEAP} -Xmx${OPENSEARCH_JVM_HEAP}"
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=${OPENSEARCH_INITIAL_ADMIN_PASSWORD}
      - TZ=${TZ}
      - network.host=0.0.0.0
      - "plugins.security.ssl.http.enabled=false"
    ulimits:
      memlock: { soft: -1, hard: -1 }
      nofile: { soft: 65536, hard: 65536 }
    volumes:
      - ./data/opensearch:/usr/share/opensearch/data
    ports:
      - "${OPENSEARCH_PORT_API}:9200"
      - "${OPENSEARCH_PORT_PERF}:9600"
    networks:
      - security-stack-net
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    restart: unless-stopped

  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:${OPENSEARCH_VERSION}
    container_name: ${OPENSEARCH_DASHBOARDS_HOSTNAME}
    hostname: ${OPENSEARCH_DASHBOARDS_HOSTNAME}
    ports:
      - "${OPENSEARCH_DASHBOARDS_PORT}:5601"
    environment:
      - OPENSEARCH_HOSTS=http://${OPENSEARCH_HOSTNAME}:${OPENSEARCH_PORT_API}
      - DISABLE_SECURITY_DASHBOARDS_PLUGIN=true
    networks:
      - security-stack-net
    depends_on:
      opensearch:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  fluent-bit:
    image: fluent/fluent-bit:3.1.9
    container_name: fluent-bit
    environment:
      - OPENSEARCH_HOSTNAME=${OPENSEARCH_HOSTNAME}
      - OPENSEARCH_PORT_API=${OPENSEARCH_PORT_API}
      - HOSTNAME=${HOSTNAME}
    volumes:
      - ./config/fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - ./config/fluent-bit/parsers.conf:/fluent-bit/etc/parsers.conf:ro
      - ./data/wazuh/logs/alerts:/var/log/wazuh-alerts:ro
      - ./data/suricata/logs:/var/log/suricata:ro
      - fluent_bit_db:/fluent-bit/db
    ports:
      - "2020:2020"  # HTTP monitoring port
    networks:
      - security-stack-net
    depends_on:
      opensearch:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:2020/api/v1/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  wazuh-manager:
    image: wazuh/wazuh-manager:${WAZUH_MANAGER_VERSION}
    container_name: ${WAZUH_MANAGER_HOSTNAME}
    hostname: ${WAZUH_MANAGER_HOSTNAME}
    depends_on:
      opensearch:
        condition: service_healthy
    environment:
      - FILEBEAT_ENABLE=no
      - INDEXER_URL=http://${OPENSEARCH_HOSTNAME}:${OPENSEARCH_PORT_API}
    ports:
      - "${WAZUH_API_PORT}:55000"
      - "${WAZUH_AGENT_CONN_PORT}:1514/udp"
      - "${WAZUH_AGENT_REG_PORT}:1515"
    volumes:
      - ./data/wazuh/etc:/var/ossec/etc
      - ./data/wazuh/logs:/var/ossec/logs
      - ./data/wazuh/queue:/var/ossec/queue
      - ./data/wazuh/wodles:/var/ossec/wodles
      - ./data/wazuh/integrations:/var/ossec/integrations
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - security-stack-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "/var/ossec/bin/wazuh-control status | grep -q 'wazuh-apid is running'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  shuffle-db:
    image: postgres:${POSTGRES_VERSION}
    container_name: ${SHUFFLE_DB_HOSTNAME}
    hostname: ${SHUFFLE_DB_HOSTNAME}
    environment:
      - POSTGRES_USER=${SHUFFLE_DB_USER}
      - POSTGRES_PASSWORD=${SHUFFLE_DB_PASSWORD}
      - POSTGRES_DB=${SHUFFLE_DB_NAME}
    volumes:
      - shuffle_db_data:/var/lib/postgresql/data
    networks:
      - security-stack-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SHUFFLE_DB_USER} -d ${SHUFFLE_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  shuffle-opensearch:
    image: opensearchproject/opensearch:${SHUFFLE_OPENSEARCH_VERSION}
    container_name: ${SHUFFLE_OPENSEARCH_HOSTNAME}
    hostname: ${SHUFFLE_OPENSEARCH_HOSTNAME}
    environment:
      - cluster.name=shuffle-opensearch-cluster
      - node.name=${SHUFFLE_OPENSEARCH_HOSTNAME}-node1
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=${SHUFFLE_OPENSEARCH_PASSWORD}
      - network.host=0.0.0.0
      - "plugins.security.ssl.http.enabled=false"
    ulimits:
      memlock: { soft: -1, hard: -1 }
      nofile: { soft: 65536, hard: 65536 }
    volumes:
      - ./data/shuffle/opensearch:/usr/share/opensearch/data
    networks:
      - security-stack-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
      
  shuffle-backend:
    image: ghcr.io/shuffle/shuffle-backend:${SHUFFLE_VERSION}
    container_name: ${SHUFFLE_BACKEND_HOSTNAME}
    hostname: ${SHUFFLE_BACKEND_HOSTNAME}
    user: root
    ports:
      - "${SHUFFLE_BACKEND_PORT}:5001"
    networks:
      - security-stack-net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env_file: .env
    environment:
      - SHUFFLE_DB_HOST=${SHUFFLE_DB_HOSTNAME}
      - SHUFFLE_OPENSEARCH_URL=http://${SHUFFLE_OPENSEARCH_HOSTNAME}:9200
    restart: unless-stopped
    depends_on:
      shuffle-db:
        condition: service_healthy
      shuffle-opensearch:
        condition: service_healthy
    # Health check disabled - will fail until admin user is created via web UI
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -f http://localhost:5001/api/v1/health || exit 1"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    #   start_period: 60s

  shuffle-frontend:
    image: ghcr.io/shuffle/shuffle-frontend:${SHUFFLE_VERSION}
    container_name: ${SHUFFLE_FRONTEND_HOSTNAME}
    hostname: ${SHUFFLE_FRONTEND_HOSTNAME}
    ports:
      - "${SHUFFLE_FRONTEND_PORT}:80"
    networks:
      - security-stack-net
    env_file: .env
    restart: unless-stopped
    depends_on:
      - shuffle-backend
    # Health check disabled - service works but health check is unreliable
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -f http://localhost:80 || exit 1"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    #   start_period: 30s

  shuffle-orborus:
    image: ghcr.io/shuffle/shuffle-orborus:${SHUFFLE_VERSION}
    container_name: ${SHUFFLE_ORBORUS_HOSTNAME}
    hostname: ${SHUFFLE_ORBORUS_HOSTNAME}
    networks:
      - security-stack-net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env_file: .env
    restart: unless-stopped

  iris-db:
    image: postgres:${POSTGRES_VERSION}
    container_name: ${IRIS_DB_HOSTNAME}
    hostname: ${IRIS_DB_HOSTNAME}
    environment:
      - POSTGRES_USER=${IRIS_DB_USER}
      - POSTGRES_DB=${IRIS_DB_NAME}
      - POSTGRES_PASSWORD=${IRIS_DB_PASSWORD}
    volumes:
      - iris_db_data:/var/lib/postgresql/data
    networks:
      - security-stack-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${IRIS_DB_USER} -d ${IRIS_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  iris-web:
    image: ghcr.io/dfir-iris/iriswebapp_app:${IRIS_VERSION}
    container_name: ${IRIS_HOSTNAME}
    hostname: ${IRIS_HOSTNAME}
    depends_on:
      iris-db:
        condition: service_healthy
    ports:
      - "${IRIS_PORT}:8000"
    environment:
      - POSTGRES_USER=${IRIS_DB_USER}
      - POSTGRES_PASSWORD=${IRIS_DB_PASSWORD}
      - POSTGRES_ADMIN_USER=${IRIS_DB_USER}
      - POSTGRES_ADMIN_PASSWORD=${IRIS_DB_PASSWORD}
      - POSTGRES_DB=${IRIS_DB_NAME}
      - POSTGRES_SERVER=${IRIS_DB_HOSTNAME}
      - POSTGRES_PORT=5432
      - IRIS_SECRET_KEY=${IRIS_SECRET_KEY}
      - IRIS_SECURITY_PASSWORD_SALT=randomly_generated_salt_change_me
      - IRIS_UPSTREAM_SERVER=0.0.0.0
      - IRIS_UPSTREAM_PORT=8000
    networks:
      - security-stack-net
    restart: unless-stopped
    command: ["./iris-entrypoint.sh", "iriswebapp"]
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  spiderfoot:
    build:
      context: https://github.com/smicallef/spiderfoot.git
    image: spiderfoot:latest
    container_name: ${SPIDERFOOT_HOSTNAME}
    hostname: ${SPIDERFOOT_HOSTNAME}
    ports:
      - "${SPIDERFOOT_PORT}:5001"
    volumes:
      - spiderfoot_data:/var/lib/spiderfoot
    networks:
      - security-stack-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "python3 -c 'import urllib.request; urllib.request.urlopen(\"http://localhost:5001\")' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  eramba-db:
    image: mariadb:${ERAMBA_DB_VERSION}
    container_name: ${ERAMBA_DB_HOSTNAME}
    hostname: ${ERAMBA_DB_HOSTNAME}
    environment:
      - MYSQL_ROOT_PASSWORD=${ERAMBA_DB_ROOT_PASSWORD}
      - MYSQL_USER=${ERAMBA_DB_USER}
      - MYSQL_PASSWORD=${ERAMBA_DB_PASSWORD}
      - MYSQL_DATABASE=${ERAMBA_DB_NAME}
    volumes:
      - ./data/eramba-db:/var/lib/mysql
    networks:
      - security-stack-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${ERAMBA_DB_USER}", "-p${ERAMBA_DB_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5

  eramba-web:
    image: ghcr.io/eramba/eramba:latest
    container_name: ${ERAMBA_HOSTNAME}
    hostname: ${ERAMBA_HOSTNAME}
    depends_on:
      eramba-db:
        condition: service_healthy
    ports:
      - "${ERAMBA_PORT}:80"
    environment:
      - DB_HOST=${ERAMBA_DB_HOSTNAME}
      - DB_DATABASE=${ERAMBA_DB_NAME}
      - DB_USERNAME=${ERAMBA_DB_USER}
      - DB_PASSWORD=${ERAMBA_DB_PASSWORD}
    networks:
      - security-stack-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  suricata:
    image: jasonish/suricata:${SURICATA_VERSION}
    container_name: ${SURICATA_HOSTNAME}
    hostname: ${SURICATA_HOSTNAME}
    network_mode: host
    cap_add:
      - NET_ADMIN
      - NET_RAW
      - SYS_NICE
    volumes:
      - ./config/suricata/suricata.yaml:/etc/suricata/suricata.yaml:ro
      - ./data/suricata/logs:/var/log/suricata:rw
    command: suricata -c /etc/suricata/suricata.yaml -i eth0
    restart: unless-stopped
    # Health check disabled - service works but health check is unreliable
    # healthcheck:
    #   test: ["CMD-SHELL", "test -f /var/log/suricata/eve.json && pgrep suricata"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 60s

  misp-db:
    image: mariadb:10.11
    container_name: ${MISP_DB_HOSTNAME}
    hostname: ${MISP_DB_HOSTNAME}
    environment:
      - MYSQL_ROOT_PASSWORD=${MISP_DB_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MISP_DB_NAME}
      - MYSQL_USER=${MISP_DB_USER}
      - MYSQL_PASSWORD=${MISP_DB_PASSWORD}
    command: >
      --innodb-buffer-pool-size=1024M
      --innodb-change-buffering=none
      --innodb-io-capacity=1000
      --innodb-io-capacity-max=2000
      --innodb-log-file-size=600M
      --innodb-read-io-threads=16
      --innodb-stats-persistent=ON
      --innodb-write-io-threads=4
    volumes:
      - misp_db_data:/var/lib/mysql
    networks:
      - security-stack-net
    restart: unless-stopped
    cap_add:
      - SYS_NICE
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "--user=$$MYSQL_USER", "--password=$$MYSQL_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5

  misp-redis:
    image: redis:7.2
    container_name: ${MISP_REDIS_HOSTNAME}
    hostname: ${MISP_REDIS_HOSTNAME}
    command: --requirepass '${MISP_REDIS_PASSWORD}'
    networks:
      - security-stack-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${MISP_REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  misp-web:
    image: ghcr.io/misp/misp-docker/misp-core:latest
    container_name: ${MISP_HOSTNAME}
    hostname: ${MISP_HOSTNAME}
    ports:
      - "${MISP_PORT}:80"
    networks:
      - security-stack-net
    depends_on:
      misp-db:
        condition: service_healthy
      misp-redis:
        condition: service_healthy
    environment:
      - "BASE_URL=http://${HOSTNAME}:${MISP_PORT}"
      - "DISABLE_SSL_REDIRECT=true"
      - "DISABLE_IPV6=true"
      - "MYSQL_HOST=${MISP_DB_HOSTNAME}"
      - "MYSQL_PORT=3306"
      - "MYSQL_USER=${MISP_DB_USER}"
      - "MYSQL_PASSWORD=${MISP_DB_PASSWORD}"
      - "MYSQL_DATABASE=${MISP_DB_NAME}"
      - "REDIS_HOST=${MISP_REDIS_HOSTNAME}"
      - "REDIS_PORT=6379"
      - "REDIS_PASSWORD=${MISP_REDIS_PASSWORD}"
      - "ADMIN_EMAIL=admin@admin.test"
      - "ADMIN_PASSWORD=admin"
      - "ADMIN_ORG=ORGNAME"
    restart: unless-stopped
    # Health check disabled - service works but health check is unreliable
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -f http://localhost/users/login || exit 1"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    #   start_period: 120s

  defectdojo-db:
    image: postgres:${POSTGRES_VERSION}
    container_name: ${DEFECTDOJO_DB_HOSTNAME}
    hostname: ${DEFECTDOJO_DB_HOSTNAME}
    environment:
      - POSTGRES_USER=${DEFECTDOJO_DB_USER}
      - POSTGRES_DB=${DEFECTDOJO_DB_NAME}
      - POSTGRES_PASSWORD=${DEFECTDOJO_DB_PASSWORD}
    volumes:
      - defectdojo_db_data:/var/lib/postgresql/data
    networks:
      - security-stack-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DEFECTDOJO_DB_USER} -d ${DEFECTDOJO_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: defectdojo/defectdojo-nginx:latest
    container_name: defectdojo-nginx
    hostname: nginx
    ports:
      - "${DEFECTDOJO_PORT}:8080"
    networks:
      - security-stack-net
    depends_on:
      - uwsgi
    volumes:
      - defectdojo_static:/app/static:ro
      - defectdojo_media:/app/media:ro
    restart: unless-stopped

  uwsgi:
    image: defectdojo/defectdojo-django:latest
    container_name: defectdojo-app
    hostname: uwsgi
    expose:
      - "3031"
    networks:
      - security-stack-net
    depends_on:
      defectdojo-db:
        condition: service_healthy
    environment:
      - DD_DATABASE_URL=postgresql://${DEFECTDOJO_DB_USER}:${DEFECTDOJO_DB_PASSWORD}@${DEFECTDOJO_DB_HOSTNAME}:5432/${DEFECTDOJO_DB_NAME}
      - DD_SECRET_KEY=${DEFECTDOJO_SECRET_KEY}
      - DD_CELERY_BROKER_URL=redis://${MISP_REDIS_HOSTNAME}:6379/1
      - DD_ADMIN_USER=${DEFECTDOJO_ADMIN_USER}
      - DD_ADMIN_MAIL=${DEFECTDOJO_ADMIN_EMAIL}
      - DD_ADMIN_PASSWORD=${DEFECTDOJO_ADMIN_PASSWORD}
      - DD_ALLOWED_HOSTS=localhost,127.0.0.1,${DEFECTDOJO_HOSTNAME}
      - DD_DEBUG=False
      - DD_INITIALIZE=true
      - DD_STATIC_ROOT=/app/static
      - DD_MEDIA_ROOT=/app/media
    volumes:
      - ./scripts/defectdojo-init.sh:/init.sh:ro
      - defectdojo_static:/app/static
      - defectdojo_media:/app/media
    command: >
      sh -c "
        chmod +x /init.sh &&
        /init.sh &&
        exec /entrypoint-uwsgi.sh
      "
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "python3 -c 'import urllib.request; urllib.request.urlopen(\"http://localhost:8081\")' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 180s

  uptime-kuma:
    image: louislam/uptime-kuma:1
    container_name: uptime-kuma
    hostname: uptime-kuma
    ports:
      - "${UPTIME_KUMA_PORT}:3001"
    volumes:
      - uptime_kuma_data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - UPTIME_KUMA_DISABLE_FRAME_SAMEORIGIN=true
    networks:
      - security-stack-net
    restart: unless-stopped
    # Health check disabled - service works but health check is unreliable
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -f http://localhost:3001 || exit 1"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    #   start_period: 60s

networks:
  security-stack-net:
    driver: bridge

volumes:
  shuffle_db_data:
    driver: local
  iris_db_data:
    driver: local
  misp_db_data:
    driver: local
  defectdojo_db_data:
    driver: local
  spiderfoot_data:
    driver: local
  uptime_kuma_data:
    driver: local
  defectdojo_static:
    driver: local
  defectdojo_media:
    driver: local
  fluent_bit_db:
    driver: local

