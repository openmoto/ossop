services:
  opensearch:
    image: opensearchproject/opensearch:${OPENSEARCH_VERSION}
    container_name: ${OPENSEARCH_HOSTNAME}
    hostname: ${OPENSEARCH_HOSTNAME}
    environment:
      - cluster.name=opensearch-cluster
      - node.name=${OPENSEARCH_HOSTNAME}-node1
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms${OPENSEARCH_JVM_HEAP} -Xmx${OPENSEARCH_JVM_HEAP}"
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=${OPENSEARCH_INITIAL_ADMIN_PASSWORD}
      - TZ=${TZ}
      - network.host=0.0.0.0
      - "plugins.security.ssl.http.enabled=false"
    ulimits:
      memlock: { soft: -1, hard: -1 }
      nofile: { soft: 65536, hard: 65536 }
    volumes:
      - ./data/opensearch:/usr/share/opensearch/data
    ports:
      - "${OPENSEARCH_PORT_API}:9200"
      - "9600:9600"
    networks:
      - security-stack-net
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    restart: unless-stopped

  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:${OPENSEARCH_VERSION}
    container_name: ${OPENSEARCH_DASHBOARDS_HOSTNAME}
    hostname: ${OPENSEARCH_DASHBOARDS_HOSTNAME}
    ports:
      - "${OPENSEARCH_DASHBOARDS_PORT}:5601"
    environment:
      - OPENSEARCH_HOSTS=http://${OPENSEARCH_HOSTNAME}:${OPENSEARCH_PORT_API}
      - DISABLE_SECURITY_DASHBOARDS_PLUGIN=true
    networks:
      - security-stack-net
    depends_on:
      opensearch:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  filebeat:
    image: docker.elastic.co/beats/filebeat-oss:${FILEBEAT_OSS_VERSION}
    container_name: filebeat
    user: root
    environment:
      - OPENSEARCH_HOSTNAME=${OPENSEARCH_HOSTNAME}
      - OPENSEARCH_PORT_API=${OPENSEARCH_PORT_API}
    volumes:
      - ./config/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./data/wazuh/logs/alerts:/var/log/wazuh-alerts:ro
      - ./data/suricata/logs:/var/log/suricata:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./data/filebeat:/usr/share/filebeat/data:rw
    networks:
      - security-stack-net
    depends_on:
      opensearch:
        condition: service_healthy
    command: sh -c "sleep 15 && filebeat -e"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "filebeat test config"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  wazuh-manager:
    image: wazuh/wazuh-manager:${WAZUH_MANAGER_VERSION}
    container_name: ${WAZUH_MANAGER_HOSTNAME}
    hostname: ${WAZUH_MANAGER_HOSTNAME}
    depends_on:
      opensearch:
        condition: service_healthy
    environment:
      - FILEBEAT_ENABLE=no
      - INDEXER_URL=http://${OPENSEARCH_HOSTNAME}:${OPENSEARCH_PORT_API}
    ports:
      - "${WAZUH_API_PORT}:55000"
      - "${WAZUH_AGENT_CONN_PORT}:1514/udp"
      - "${WAZUH_AGENT_REG_PORT}:1515"
    volumes:
      - ./data/wazuh/etc:/var/ossec/etc
      - ./data/wazuh/logs:/var/ossec/logs
      - ./data/wazuh/queue:/var/ossec/queue
      - ./data/wazuh/wodles:/var/ossec/wodles
      - ./data/wazuh/integrations:/var/ossec/integrations
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - security-stack-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "/var/ossec/bin/wazuh-control status | grep -q 'wazuh-apid is running'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  shuffle-db:
    image: postgres:${POSTGRES_VERSION}
    container_name: ${SHUFFLE_DB_HOSTNAME}
    hostname: ${SHUFFLE_DB_HOSTNAME}
    env_file: .env
    volumes:
      - ./data/shuffle/shuffle-database:/var/lib/postgresql/data
    networks:
      - security-stack-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  shuffle-opensearch:
    image: opensearchproject/opensearch:${SHUFFLE_OPENSEARCH_VERSION}
    container_name: ${SHUFFLE_OPENSEARCH_HOSTNAME}
    hostname: ${SHUFFLE_OPENSEARCH_HOSTNAME}
    environment:
      - cluster.name=shuffle-opensearch-cluster
      - node.name=${SHUFFLE_OPENSEARCH_HOSTNAME}-node1
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=${SHUFFLE_OPENSEARCH_PASSWORD}
      - network.host=0.0.0.0
      - "plugins.security.ssl.http.enabled=false"
    ulimits:
      memlock: { soft: -1, hard: -1 }
      nofile: { soft: 65536, hard: 65536 }
    volumes:
      - ./data/shuffle/opensearch:/usr/share/opensearch/data
    networks:
      - security-stack-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
      
  shuffle-backend:
    image: ghcr.io/shuffle/shuffle-backend:${SHUFFLE_VERSION}
    container_name: ${SHUFFLE_BACKEND_HOSTNAME}
    hostname: ${SHUFFLE_BACKEND_HOSTNAME}
    user: root
    ports:
      - "${SHUFFLE_BACKEND_PORT}:5001"
    networks:
      - security-stack-net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env_file: .env
    environment:
      - SHUFFLE_DB_HOST=${SHUFFLE_DB_HOSTNAME}
      - SHUFFLE_OPENSEARCH_URL=http://${SHUFFLE_OPENSEARCH_HOSTNAME}:9200
    restart: unless-stopped
    depends_on:
      shuffle-db:
        condition: service_healthy
      shuffle-opensearch:
        condition: service_healthy

  shuffle-frontend:
    image: ghcr.io/shuffle/shuffle-frontend:${SHUFFLE_VERSION}
    container_name: ${SHUFFLE_FRONTEND_HOSTNAME}
    hostname: ${SHUFFLE_FRONTEND_HOSTNAME}
    ports:
      - "${SHUFFLE_FRONTEND_PORT}:80"
    networks:
      - security-stack-net
    env_file: .env
    restart: unless-stopped
    depends_on:
      - shuffle-backend

  shuffle-orborus:
    image: ghcr.io/shuffle/shuffle-orborus:${SHUFFLE_VERSION}
    container_name: ${SHUFFLE_ORBORUS_HOSTNAME}
    hostname: ${SHUFFLE_ORBORUS_HOSTNAME}
    networks:
      - security-stack-net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env_file: .env
    restart: unless-stopped

  iris-db:
    image: postgres:${POSTGRES_VERSION}
    container_name: ${IRIS_DB_HOSTNAME}
    hostname: ${IRIS_DB_HOSTNAME}
    environment:
      - POSTGRES_USER=${IRIS_DB_USER}
      - POSTGRES_DB=${IRIS_DB_NAME}
      - POSTGRES_PASSWORD=${IRIS_DB_PASSWORD}
    volumes:
      - ./data/iris-db:/var/lib/postgresql/data
    networks:
      - security-stack-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${IRIS_DB_USER} -d ${IRIS_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  iris-web:
    image: dfir-iris/iris-web:${IRIS_VERSION}
    container_name: ${IRIS_HOSTNAME}
    hostname: ${IRIS_HOSTNAME}
    depends_on:
      iris-db:
        condition: service_healthy
    ports:
      - "${IRIS_PORT}:8080"
    environment:
      - IRIS_SECRET_KEY=${IRIS_SECRET_KEY}
      - IRIS_DB_USER=${IRIS_DB_USER}
      - IRIS_DB_PASSWORD=${IRIS_DB_PASSWORD}
      - IRIS_DB_HOST=${IRIS_DB_HOSTNAME}
      - IRIS_DB_NAME=${IRIS_DB_NAME}
      - IRIS_WEB_LISTEN_ADDR=0.0.0.0
    networks:
      - security-stack-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  spiderfoot:
    image: smicallef/spiderfoot:${SPIDERFOOT_VERSION}
    container_name: ${SPIDERFOOT_HOSTNAME}
    hostname: ${SPIDERFOOT_HOSTNAME}
    ports:
      - "${SPIDERFOOT_PORT}:5001"
    environment:
      - SPIDERFOOT_USERNAME=${SPIDERFOOT_USERNAME}
      - SPIDERFOOT_PASSWORD=${SPIDERFOOT_PASSWORD}
    volumes:
      - ./data/spiderfoot:/home/spiderfoot/.spiderfoot:rw
    networks:
      - security-stack-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "-u", "${SPIDERFOOT_USERNAME}:${SPIDERFOOT_PASSWORD}", "http://localhost:5001"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  eramba-db:
    image: mariadb:${ERAMBA_DB_VERSION}
    container_name: ${ERAMBA_DB_HOSTNAME}
    hostname: ${ERAMBA_DB_HOSTNAME}
    environment:
      - MYSQL_ROOT_PASSWORD=${ERAMBA_DB_ROOT_PASSWORD}
      - MYSQL_USER=${ERAMBA_DB_USER}
      - MYSQL_PASSWORD=${ERAMBA_DB_PASSWORD}
      - MYSQL_DATABASE=${ERAMBA_DB_NAME}
    volumes:
      - ./data/eramba-db:/var/lib/mysql
    networks:
      - security-stack-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${ERAMBA_DB_USER}", "-p${ERAMBA_DB_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5

  eramba-web:
    image: eramba/eramba_community:latest # Eramba has a unique versioning, latest is standard
    container_name: ${ERAMBA_HOSTNAME}
    hostname: ${ERAMBA_HOSTNAME}
    depends_on:
      eramba-db:
        condition: service_healthy
    ports:
      - "${ERAMBA_PORT}:80"
    environment:
      - ERAMBA_DB_HOST=${ERAMBA_DB_HOSTNAME}
      - ERAMBA_DB_NAME=${ERAMBA_DB_NAME}
      - ERAMBA_DB_USER=${ERAMBA_DB_USER}
      - ERAMBA_DB_PASS=${ERAMBA_DB_PASSWORD}
    networks:
      - security-stack-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health?source=docker"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  suricata:
    image: jasonish/suricata:${SURICATA_VERSION}
    container_name: ${SURICATA_HOSTNAME}
    hostname: ${SURICATA_HOSTNAME}
    network_mode: host
    cap_add:
      - NET_ADMIN
      - NET_RAW
      - SYS_NICE
    volumes:
      - ./config/suricata/suricata.yaml:/etc/suricata/suricata.yaml:ro
      - ./data/suricata/logs:/var/log/suricata:rw
    command: suricata -c /etc/suricata/suricata.yaml -i eth0
    restart: unless-stopped

  misp-db:
    image: postgres:${POSTGRES_VERSION}
    container_name: ${MISP_DB_HOSTNAME}
    hostname: ${MISP_DB_HOSTNAME}
    environment:
      - POSTGRES_PASSWORD=${MISP_DB_ROOT_PASSWORD}
    volumes:
      - ./data/misp/db:/var/lib/postgresql/data
    networks:
      - security-stack-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  misp-redis:
    image: redis:7.2
    container_name: ${MISP_REDIS_HOSTNAME}
    hostname: ${MISP_REDIS_HOSTNAME}
    networks:
      - security-stack-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  misp-web:
    image: coolacid/misp-docker:${MISP_VERSION}
    container_name: ${MISP_HOSTNAME}
    hostname: ${MISP_HOSTNAME}
    ports:
      - "${MISP_PORT}:80"
    networks:
      - security-stack-net
    depends_on:
      misp-db:
        condition: service_healthy
      misp-redis:
        condition: service_healthy
    environment:
      - "DB_HOST=${MISP_DB_HOSTNAME}"
      - "DB_DATABASE=${MISP_DB_NAME}"
      - "DB_USERNAME=${MISP_DB_USER}"
      - "DB_PASSWORD=${MISP_DB_PASSWORD}"
      - "REDIS_HOST=${MISP_REDIS_HOSTNAME}"
      - "INIT_BASEURL=http://${HOSTNAME}:${MISP_PORT}"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/users/login"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  defectdojo-db:
    image: postgres:${POSTGRES_VERSION}
    container_name: ${DEFECTDOJO_DB_HOSTNAME}
    hostname: ${DEFECTDOJO_DB_HOSTNAME}
    environment:
      - POSTGRES_USER=${DEFECTDOJO_DB_USER}
      - POSTGRES_DB=${DEFECTDOJO_DB_NAME}
      - POSTGRES_PASSWORD=${DEFECTDOJO_DB_PASSWORD}
    volumes:
      - ./data/defectdojo-db:/var/lib/postgresql/data
    networks:
      - security-stack-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DEFECTDOJO_DB_USER} -d ${DEFECTDOJO_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  defectdojo-app:
    image: defectdojo/defectdojo-django:${DEFECTDOJO_VERSION}
    container_name: ${DEFECTDOJO_HOSTNAME}
    hostname: ${DEFECTDOJO_HOSTNAME}
    ports:
      - "${DEFECTDOJO_PORT}:8080"
    networks:
      - security-stack-net
    depends_on:
      defectdojo-db:
        condition: service_healthy
    environment:
      - DD_DATABASE_URL=postgresql://${DEFECTDOJO_DB_USER}:${DEFECTDOJO_DB_PASSWORD}@${DEFECTDOJO_DB_HOSTNAME}:5432/${DEFECTDOJO_DB_NAME}
      - DD_SECRET_KEY=${DEFECTDOJO_SECRET_KEY}
      - DD_CELERY_BROKER_URL=redis://localhost:6379/1 # Note: Requires a separate Redis for celery tasks in a full production setup.
      - DD_CELERY_BROKER_TYPE=redis
    restart: unless-stopped
    command: >
      bash -c "
      ./manage.py migrate && 
      ./manage.py loaddata initial_data && 
      ./manage.py create_inline_wizards &&
      ./manage.py runserver 0.0.0.0:8080"

networks:
  security-stack-net:
    driver: bridge

